/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ClaimedOrderedWithdrawal = ContractEventLog<{
  fromPoolStakingAddress: string;
  staker: string;
  stakingEpoch: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ClaimedReward = ContractEventLog<{
  fromPoolStakingAddress: string;
  staker: string;
  stakingEpoch: string;
  nativeCoinsAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type MovedStake = ContractEventLog<{
  fromPoolStakingAddress: string;
  toPoolStakingAddress: string;
  staker: string;
  stakingEpoch: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type OrderedWithdrawal = ContractEventLog<{
  fromPoolStakingAddress: string;
  staker: string;
  stakingEpoch: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PlacedStake = ContractEventLog<{
  toPoolStakingAddress: string;
  staker: string;
  stakingEpoch: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type WithdrewStake = ContractEventLog<{
  fromPoolStakingAddress: string;
  staker: string;
  stakingEpoch: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface StakingHbbftCoinsMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): StakingHbbftCoinsMock;
  clone(): StakingHbbftCoinsMock;
  methods: {
    MAX_CANDIDATES(): NonPayableTransactionObject<string>;

    /**
     * Adds a new candidate's pool to the list of active pools (see the `getPools` getter) and moves the specified amount of staking coins from the candidate's staking address to the candidate's pool. A participant calls this function using their staking address when they want to create a pool. This is a wrapper for the `stake` function.
     * @param _miningAddress The mining address of the candidate. The mining address is bound to the staking address (msg.sender). This address cannot be equal to `msg.sender`.
     */
    addPool(
      _miningAddress: string,
      _publicKey: string | number[],
      _ip: string | number[]
    ): PayableTransactionObject<void>;

    addPoolActiveMock(
      _stakingAddress: string
    ): NonPayableTransactionObject<void>;

    addPoolInactiveMock(
      _stakingAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * Determines whether staking/withdrawal operations are allowed at the moment. Used by all staking/withdrawal functions.
     */
    areStakeAndWithdrawAllowed(): NonPayableTransactionObject<boolean>;

    candidateMinStake(): NonPayableTransactionObject<string>;

    /**
     * Withdraws the staking coins from the specified pool ordered during the previous staking epochs with the `orderWithdraw` function. The ordered amount can be retrieved by the `orderedWithdrawAmount` getter.
     * @param _poolStakingAddress The staking address of the pool from which the ordered coins are withdrawn.
     */
    claimOrderedWithdraw(
      _poolStakingAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * Withdraws a reward from the specified pool for the specified staking epochs to the staker address (msg.sender).
     * @param _poolStakingAddress The staking address of the pool from which the reward needs to be withdrawn.
     * @param _stakingEpochs The list of staking epochs in ascending order. If the list is empty, it is taken with `BlockRewardHbbft.epochsPoolGotRewardFor` getter.
     */
    claimReward(
      _stakingEpochs: (number | string | BN)[],
      _poolStakingAddress: string
    ): NonPayableTransactionObject<void>;

    clearDelegatorStakeSnapshot(
      _poolStakingAddress: string,
      _delegator: string,
      _stakingEpoch: number | string | BN
    ): NonPayableTransactionObject<void>;

    clearRewardWasTaken(
      _poolStakingAddress: string,
      _staker: string,
      _epoch: number | string | BN
    ): NonPayableTransactionObject<void>;

    currentKeyGenExtraTimeWindow(): NonPayableTransactionObject<string>;

    delegatorMinStake(): NonPayableTransactionObject<string>;

    delegatorStakeSnapshot(
      arg0: string,
      arg1: string,
      arg2: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPoolInternetAddress(
      _poolAddress: string
    ): NonPayableTransactionObject<string>;

    getPoolPublicKey(_poolAddress: string): NonPayableTransactionObject<string>;

    /**
     * Returns an array of the current active pools (the staking addresses of candidates and validators). The size of the array cannot exceed MAX_CANDIDATES. A pool can be added to this array with the `_addPoolActive` internal function which is called by the `stake` or `orderWithdraw` function. A pool is considered active if its address has at least the minimum stake and this stake is not ordered to be withdrawn.
     */
    getPools(): NonPayableTransactionObject<string[]>;

    /**
     * Returns an array of the current inactive pools (the staking addresses of former candidates). A pool can be added to this array with the `_addPoolInactive` internal function which is called by `_removePool`. A pool is considered inactive if it is banned for some reason, if its address has zero stake, or if its entire stake is ordered to be withdrawn.
     */
    getPoolsInactive(): NonPayableTransactionObject<string[]>;

    /**
     * Returns the array of stake amounts for each corresponding address in the `poolsToBeElected` array (see the `getPoolsToBeElected` getter) and a sum of these amounts. Used by the `ValidatorSetHbbft.newValidatorSet` function when randomly selecting new validators at the last block of a staking epoch. An array value is updated every time any staked amount is changed in this pool (see the `_setLikelihood` internal function).
     * @returns `uint256[] likelihoods` - The array of the coefficients. The array length is always equal to the length of the `poolsToBeElected` array. `uint256 sum` - The total sum of the amounts.
     */
    getPoolsLikelihood(): NonPayableTransactionObject<{
      likelihoods: string[];
      sum: string;
      0: string[];
      1: string;
    }>;

    /**
     * Returns the list of pools (their staking addresses) which will participate in a new validator set selection process in the `ValidatorSetHbbft.newValidatorSet` function. This is an array of pools which will be considered as candidates when forming a new validator set (at the last block of a staking epoch). This array is kept updated by the `_addPoolToBeElected` and `_deletePoolToBeElected` internal functions.
     */
    getPoolsToBeElected(): NonPayableTransactionObject<string[]>;

    /**
     * Returns the list of pools (their staking addresses) which will be removed by the `ValidatorSetHbbft.newValidatorSet` function from the active `pools` array (at the last block of a staking epoch). This array is kept updated by the `_addPoolToBeRemoved` and `_deletePoolToBeRemoved` internal functions. A pool is added to this array when the pool's address withdraws (or orders) all of its own staking coins from the pool, inactivating the pool.
     */
    getPoolsToBeRemoved(): NonPayableTransactionObject<string[]>;

    /**
     * Returns reward amount in native coins for the specified pool, the specified staking epochs, and the specified staker address (delegator or validator).
     * @param _poolStakingAddress The staking address of the pool for which the amounts need to be returned.
     * @param _staker The staker address (validator's staking address or delegator's address).
     * @param _stakingEpochs The list of staking epochs in ascending order. If the list is empty, it is taken with `BlockRewardHbbft.epochsPoolGotRewardFor` getter.
     */
    getRewardAmount(
      _stakingEpochs: (number | string | BN)[],
      _poolStakingAddress: string,
      _staker: string
    ): NonPayableTransactionObject<string>;

    /**
     * Increments the serial number of the current staking epoch. Called by the `ValidatorSetHbbft.newValidatorSet` at the last block of the finished staking epoch.
     */
    incrementStakingEpoch(): NonPayableTransactionObject<void>;

    /**
     * Initializes the network parameters. Can only be called by the constructor of the `InitializerHbbft` contract or owner.
     * @param _candidateMinStake The minimum allowed amount of candidate/validator stake in Wei.
     * @param _delegatorMinStake The minimum allowed amount of delegator stake in Wei.
     * @param _initialStakingAddresses The array of initial validators' staking addresses.
     * @param _stakingFixedEpochDuration The fixed duration of each epoch before keyGen starts.
     * @param _stakingTransitionTimeframeLength Length of the timeframe in seconds for the transition to the new validator set.
     * @param _stakingWithdrawDisallowPeriod The duration period at the end of a staking epoch during which participants cannot stake/withdraw/order/claim their staking coins
     * @param _validatorSetContract The address of the `ValidatorSetHbbft` contract.
     */
    initialize(
      _validatorSetContract: string,
      _initialStakingAddresses: string[],
      _delegatorMinStake: number | string | BN,
      _candidateMinStake: number | string | BN,
      _stakingFixedEpochDuration: number | string | BN,
      _stakingTransitionTimeframeLength: number | string | BN,
      _stakingWithdrawDisallowPeriod: number | string | BN,
      _publicKeys: (string | number[])[],
      _internetAddresses: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    /**
     * Returns a boolean flag indicating if the `initialize` function has been called.
     */
    isInitialized(): NonPayableTransactionObject<boolean>;

    /**
     * Returns a flag indicating whether a specified address is in the `pools` array. See the `getPools` getter.
     * @param _stakingAddress The staking address of the pool.
     */
    isPoolActive(_stakingAddress: string): NonPayableTransactionObject<boolean>;

    /**
     * Returns the maximum amount which can be withdrawn from the specified pool by the specified staker at the moment. Used by the `withdraw` and `moveStake` functions.
     * @param _poolStakingAddress The pool staking address from which the withdrawal will be made.
     * @param _staker The staker address that is going to withdraw.
     */
    maxWithdrawAllowed(
      _poolStakingAddress: string,
      _staker: string
    ): NonPayableTransactionObject<string>;

    /**
     * Returns the maximum amount which can be ordered to be withdrawn from the specified pool by the specified staker at the moment. Used by the `orderWithdraw` function.
     * @param _poolStakingAddress The pool staking address from which the withdrawal will be ordered.
     * @param _staker The staker address that is going to order the withdrawal.
     */
    maxWithdrawOrderAllowed(
      _poolStakingAddress: string,
      _staker: string
    ): NonPayableTransactionObject<string>;

    /**
     * Moves staking coins from one pool to another. A staker calls this function when they want to move their coins from one pool to another without withdrawing their coins.
     * @param _amount The amount of staking coins to be moved. The amount cannot exceed the value returned by the `maxWithdrawAllowed` getter.
     * @param _fromPoolStakingAddress The staking address of the source pool.
     * @param _toPoolStakingAddress The staking address of the target pool.
     */
    moveStake(
      _fromPoolStakingAddress: string,
      _toPoolStakingAddress: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Notifies hbbft staking contract that a validator asociated with the given `_stakingAddress` became available again and can be put on to the list  of available nodes again.
     */
    notifyAvailability(
      _stakingAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * Notifies hbbft staking contract that the key generation has failed, and a new round  of keygeneration starts.
     */
    notifyKeyGenFailed(): NonPayableTransactionObject<void>;

    /**
     * Orders coins withdrawal from the staking address of the specified pool to the staker's address. The requested coins can be claimed after the current staking epoch is complete using the `claimOrderedWithdraw` function.
     * @param _amount The amount to be withdrawn. A positive value means the staker wants to either set or increase their withdrawal amount. A negative value means the staker wants to decrease a withdrawal amount that was previously set. The amount cannot exceed the value returned by the `maxWithdrawOrderAllowed` getter.
     * @param _poolStakingAddress The staking address of the pool from which the amount will be withdrawn.
     */
    orderWithdraw(
      _poolStakingAddress: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    orderWithdrawEpoch(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    orderedWithdrawAmount(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    orderedWithdrawAmountTotal(
      arg0: string
    ): NonPayableTransactionObject<string>;

    poolDelegatorInactiveIndex(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    poolDelegatorIndex(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    /**
     * Returns an array of the current active delegators of the specified pool. A delegator is considered active if they have staked into the specified pool and their stake is not ordered to be withdrawn.
     * @param _poolStakingAddress The pool staking address.
     */
    poolDelegators(
      _poolStakingAddress: string
    ): NonPayableTransactionObject<string[]>;

    /**
     * Returns an array of the current inactive delegators of the specified pool. A delegator is considered inactive if their entire stake is ordered to be withdrawn but not yet claimed.
     * @param _poolStakingAddress The pool staking address.
     */
    poolDelegatorsInactive(
      _poolStakingAddress: string
    ): NonPayableTransactionObject<string[]>;

    poolInactiveIndex(arg0: string): NonPayableTransactionObject<string>;

    poolIndex(arg0: string): NonPayableTransactionObject<string>;

    poolInfo(
      arg0: string
    ): NonPayableTransactionObject<{
      publicKey: string;
      internetAddress: string;
      0: string;
      1: string;
    }>;

    poolToBeElectedIndex(arg0: string): NonPayableTransactionObject<string>;

    poolToBeRemovedIndex(arg0: string): NonPayableTransactionObject<string>;

    /**
     * Removes the candidate's or validator's pool from the `pools` array (a list of active pools which can be retrieved by the `getPools` getter). When a candidate or validator wants to remove their pool, they should call this function from their staking address.
     */
    removeMyPool(): NonPayableTransactionObject<void>;

    /**
     * Removes a specified pool from the `pools` array (a list of active pools which can be retrieved by the `getPools` getter). Called by the `ValidatorSetHbbft._removeMaliciousValidator` internal function when a pool must be removed by the algorithm.
     * @param _stakingAddress The staking address of the pool to be removed.
     */
    removePool(_stakingAddress: string): NonPayableTransactionObject<void>;

    /**
     * Removes pools which are in the `_poolsToBeRemoved` internal array from the `pools` array. Called by the `ValidatorSetHbbft.newValidatorSet` function when a pool must be removed by the algorithm.
     */
    removePools(): NonPayableTransactionObject<void>;

    rewardWasTaken(
      arg0: string,
      arg1: string,
      arg2: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    /**
     * Sets (updates) the limit of the minimum candidate stake (CANDIDATE_MIN_STAKE). Can only be called by the `owner`.
     * @param _minStake The value of a new limit in Wei.
     */
    setCandidateMinStake(
      _minStake: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Sets (updates) the limit of the minimum delegator stake (DELEGATOR_MIN_STAKE). Can only be called by the `owner`.
     * @param _minStake The value of a new limit in Wei.
     */
    setDelegatorMinStake(
      _minStake: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPoolInfo(
      _publicKey: string | number[],
      _ip: string | number[]
    ): NonPayableTransactionObject<void>;

    setStakeAmountTotal(
      _poolStakingAddress: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setStakeFirstEpoch(
      _poolStakingAddress: string,
      _delegator: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setStakeLastEpoch(
      _poolStakingAddress: string,
      _delegator: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setStakingEpoch(
      _stakingEpoch: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Sets the timetamp of the current epoch's last block as the start time of the upcoming staking epoch. Called by the `ValidatorSetHbbft.newValidatorSet` function at the last block of a staking epoch.
     * @param _timestamp The starting time of the very first block in the upcoming staking epoch.
     */
    setStakingEpochStartTime(
      _timestamp: number | string | BN
    ): NonPayableTransactionObject<void>;

    setValidatorSetAddress(
      _validatorSetAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * Moves the specified amount of staking coins from the staker's address to the staking address of the specified pool. Actually, the amount is stored in a balance of this StakingHbbft contract. A staker calls this function when they want to make a stake into a pool.
     * @param _toPoolStakingAddress The staking address of the pool where the coins should be staked.
     */
    stake(_toPoolStakingAddress: string): PayableTransactionObject<void>;

    stakeAmount(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    /**
     * Returns the amount of staking coins staked into the specified pool by the specified staker during the current staking epoch (see the `stakingEpoch` getter). Used by the `stake`, `withdraw`, and `orderWithdraw` functions.
     * @param _poolStakingAddress The pool staking address.
     * @param _staker The staker's address.
     */
    stakeAmountByCurrentEpoch(
      _poolStakingAddress: string,
      _staker: string
    ): NonPayableTransactionObject<string>;

    stakeAmountTotal(arg0: string): NonPayableTransactionObject<string>;

    stakeFirstEpoch(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    stakeLastEpoch(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    stakingEpoch(): NonPayableTransactionObject<string>;

    stakingEpochStartBlock(): NonPayableTransactionObject<string>;

    stakingEpochStartTime(): NonPayableTransactionObject<string>;

    stakingFixedEpochDuration(): NonPayableTransactionObject<string>;

    /**
     * Returns an indicative time of the last block of the current staking epoch before key generation starts.
     */
    stakingFixedEpochEndTime(): NonPayableTransactionObject<string>;

    stakingTransitionTimeframeLength(): NonPayableTransactionObject<string>;

    stakingWithdrawDisallowPeriod(): NonPayableTransactionObject<string>;

    /**
     * indicates the time when the new validatorset for the next epoch gets chosen. this is the start of a timeframe before the end of the epoch, that is long enough for the validators to create a new shared key.
     */
    startTimeOfNextPhaseTransition(): NonPayableTransactionObject<string>;

    validatorSetContract(): NonPayableTransactionObject<string>;

    /**
     * Moves the specified amount of staking coins from the staking address of the specified pool to the staker's address. A staker calls this function when they want to withdraw their coins.
     * @param _amount The amount of coins to be withdrawn. The amount cannot exceed the value returned by the `maxWithdrawAllowed` getter.
     * @param _fromPoolStakingAddress The staking address of the pool from which the coins should be withdrawn.
     */
    withdraw(
      _fromPoolStakingAddress: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ClaimedOrderedWithdrawal(
      cb?: Callback<ClaimedOrderedWithdrawal>
    ): EventEmitter;
    ClaimedOrderedWithdrawal(
      options?: EventOptions,
      cb?: Callback<ClaimedOrderedWithdrawal>
    ): EventEmitter;

    ClaimedReward(cb?: Callback<ClaimedReward>): EventEmitter;
    ClaimedReward(
      options?: EventOptions,
      cb?: Callback<ClaimedReward>
    ): EventEmitter;

    MovedStake(cb?: Callback<MovedStake>): EventEmitter;
    MovedStake(options?: EventOptions, cb?: Callback<MovedStake>): EventEmitter;

    OrderedWithdrawal(cb?: Callback<OrderedWithdrawal>): EventEmitter;
    OrderedWithdrawal(
      options?: EventOptions,
      cb?: Callback<OrderedWithdrawal>
    ): EventEmitter;

    PlacedStake(cb?: Callback<PlacedStake>): EventEmitter;
    PlacedStake(
      options?: EventOptions,
      cb?: Callback<PlacedStake>
    ): EventEmitter;

    WithdrewStake(cb?: Callback<WithdrewStake>): EventEmitter;
    WithdrewStake(
      options?: EventOptions,
      cb?: Callback<WithdrewStake>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ClaimedOrderedWithdrawal",
    cb: Callback<ClaimedOrderedWithdrawal>
  ): void;
  once(
    event: "ClaimedOrderedWithdrawal",
    options: EventOptions,
    cb: Callback<ClaimedOrderedWithdrawal>
  ): void;

  once(event: "ClaimedReward", cb: Callback<ClaimedReward>): void;
  once(
    event: "ClaimedReward",
    options: EventOptions,
    cb: Callback<ClaimedReward>
  ): void;

  once(event: "MovedStake", cb: Callback<MovedStake>): void;
  once(
    event: "MovedStake",
    options: EventOptions,
    cb: Callback<MovedStake>
  ): void;

  once(event: "OrderedWithdrawal", cb: Callback<OrderedWithdrawal>): void;
  once(
    event: "OrderedWithdrawal",
    options: EventOptions,
    cb: Callback<OrderedWithdrawal>
  ): void;

  once(event: "PlacedStake", cb: Callback<PlacedStake>): void;
  once(
    event: "PlacedStake",
    options: EventOptions,
    cb: Callback<PlacedStake>
  ): void;

  once(event: "WithdrewStake", cb: Callback<WithdrewStake>): void;
  once(
    event: "WithdrewStake",
    options: EventOptions,
    cb: Callback<WithdrewStake>
  ): void;
}
