/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Confirmed = ContractEventLog<{
  who: string;
  0: string;
}>;
export type Revoked = ContractEventLog<{
  who: string;
  0: string;
}>;

export interface CertifierHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CertifierHbbft;
  clone(): CertifierHbbft;
  methods: {
    validatorSetContract(): NonPayableTransactionObject<string>;

    /**
     * Initializes the contract at network startup. Can only be called by the constructor of the `InitializerHbbft` contract or owner.
     * @param _certifiedAddresses The addresses for which a zero gas price must be allowed.
     * @param _validatorSet The address of the `ValidatorSetHbbft` contract.
     */
    initialize(
      _certifiedAddresses: string[],
      _validatorSet: string
    ): NonPayableTransactionObject<void>;

    /**
     * Allows the specified address to use a zero gas price for its transactions. Can only be called by the `owner`.
     * @param _who The address for which zero gas price transactions must be allowed.
     */
    certify(_who: string): NonPayableTransactionObject<void>;

    /**
     * Denies the specified address usage of a zero gas price for its transactions. Can only be called by the `owner`.
     * @param _who The address for which transactions with a zero gas price must be denied.
     */
    revoke(_who: string): NonPayableTransactionObject<void>;

    /**
     * Returns a boolean flag indicating whether the specified address is allowed to use zero gas price transactions. Returns `true` if either the address is certified using the `_certify` function or if `ValidatorSet.isReportValidatorValid` returns `true` for the specified address, or the address is a pending validator who has to write it's key shares (ACK and PART).
     * @param _who The address for which the boolean flag must be determined.
     */
    certified(_who: string): NonPayableTransactionObject<boolean>;

    /**
     * Returns a boolean flag indicating whether the specified address is allowed to use zero gas price transactions. Returns `true` if the address is certified using the `_certify` function. This function differs from the `certified`: it doesn't take into account the returned value of `ValidatorSetHbbft.isReportValidatorValid` function.
     * @param _who The address for which the boolean flag must be determined.
     */
    certifiedExplicitly(_who: string): NonPayableTransactionObject<boolean>;

    /**
     * Returns a boolean flag indicating if the `initialize` function has been called.
     */
    isInitialized(): NonPayableTransactionObject<boolean>;
  };
  events: {
    Confirmed(cb?: Callback<Confirmed>): EventEmitter;
    Confirmed(options?: EventOptions, cb?: Callback<Confirmed>): EventEmitter;

    Revoked(cb?: Callback<Revoked>): EventEmitter;
    Revoked(options?: EventOptions, cb?: Callback<Revoked>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Confirmed", cb: Callback<Confirmed>): void;
  once(
    event: "Confirmed",
    options: EventOptions,
    cb: Callback<Confirmed>
  ): void;

  once(event: "Revoked", cb: Callback<Revoked>): void;
  once(event: "Revoked", options: EventOptions, cb: Callback<Revoked>): void;
}
