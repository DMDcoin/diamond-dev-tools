/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IStakingHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IStakingHbbft;
  clone(): IStakingHbbft;
  methods: {
    incrementStakingEpoch(): NonPayableTransactionObject<void>;

    initialize(
      arg0: string,
      arg1: string[],
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: number | string | BN,
      arg5: number | string | BN,
      arg6: number | string | BN,
      arg7: (string | number[])[],
      arg8: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    removePool(arg0: string): NonPayableTransactionObject<void>;

    removePools(): NonPayableTransactionObject<void>;

    setStakingEpochStartTime(
      arg0: number | string | BN
    ): NonPayableTransactionObject<void>;

    notifyKeyGenFailed(): NonPayableTransactionObject<void>;

    notifyAvailability(
      _stakingAddress: string
    ): NonPayableTransactionObject<void>;

    getPoolPublicKey(_poolAddress: string): NonPayableTransactionObject<string>;

    getPoolsLikelihood(): NonPayableTransactionObject<{
      0: string[];
      1: string;
    }>;

    getPoolsToBeElected(): NonPayableTransactionObject<string[]>;

    getPoolsToBeRemoved(): NonPayableTransactionObject<string[]>;

    isPoolActive(arg0: string): NonPayableTransactionObject<boolean>;

    MAX_CANDIDATES(): NonPayableTransactionObject<string>;

    orderedWithdrawAmount(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    poolDelegators(arg0: string): NonPayableTransactionObject<string[]>;

    rewardWasTaken(
      arg0: string,
      arg1: string,
      arg2: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    stakeAmount(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    stakeAmountTotal(arg0: string): NonPayableTransactionObject<string>;

    stakeFirstEpoch(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    stakeLastEpoch(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    stakingWithdrawDisallowPeriod(): NonPayableTransactionObject<string>;

    stakingEpoch(): NonPayableTransactionObject<string>;

    stakingFixedEpochDuration(): NonPayableTransactionObject<string>;

    startTimeOfNextPhaseTransition(): NonPayableTransactionObject<string>;

    stakingFixedEpochEndTime(): NonPayableTransactionObject<string>;

    stakingEpochStartTime(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
