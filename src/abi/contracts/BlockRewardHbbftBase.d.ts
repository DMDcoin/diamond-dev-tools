/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CoinsRewarded = ContractEventLog<{
  rewards: string;
  0: string;
}>;

export interface BlockRewardHbbftBase extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BlockRewardHbbftBase;
  clone(): BlockRewardHbbftBase;
  methods: {
    REWARD_PERCENT_MULTIPLIER(): NonPayableTransactionObject<string>;

    VALIDATOR_MIN_REWARD_PERCENT(): NonPayableTransactionObject<string>;

    deltaPot(): NonPayableTransactionObject<string>;

    deltaPotPayoutFraction(): NonPayableTransactionObject<string>;

    epochPoolNativeReward(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<string>;

    governancePotAddress(): NonPayableTransactionObject<string>;

    governancePotShareDenominator(): NonPayableTransactionObject<string>;

    governancePotShareNominator(): NonPayableTransactionObject<string>;

    nativeRewardUndistributed(): NonPayableTransactionObject<string>;

    reinsertPot(): NonPayableTransactionObject<string>;

    reinsertPotPayoutFraction(): NonPayableTransactionObject<string>;

    snapshotPoolTotalStakeAmount(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<string>;

    snapshotPoolValidatorStakeAmount(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<string>;

    validatorMinRewardPercent(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    validatorSetContract(): NonPayableTransactionObject<string>;

    /**
     * Initializes the contract at network startup. Can only be called by the constructor of the `InitializerHbbft` contract or owner.
     * @param _validatorSet The address of the `ValidatorSetHbbft` contract.
     */
    initialize(_validatorSet: string): NonPayableTransactionObject<void>;

    /**
     * adds the transfered value to the delta pot. everyone is allowed to pile up the delta pot. however, circulating coins should be added to the reinsert pot, since the reinsert pot is designed for circulating coins.
     */
    addToDeltaPot(): PayableTransactionObject<void>;

    /**
     * adds the transfered value to the reinsert pot. everyone is allowed to pile up the resinsert pot, the reinsert pot reinserts coins back into the payout cycle. this is used by smart contracts of the ecosystem, DAO decisions to fund the reinsert pot from the DAO Pool and manual by hand. There is no permission check,  everyone is welcomed to pile up the reinsert pot.
     */
    addToReinsertPot(): PayableTransactionObject<void>;

    /**
     * set the delta pot payout fraction. every epoch, a fraction of the delta pot is payed out. Only theOwner, the DAO is allowed to set the delta pot payout fraction.
     */
    setdeltaPotPayoutFraction(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * set the reinsert pot payout fraction. every epoch, a fraction of the reinsert pot is payed out. (same logic than in the reinsert pot.) Only theOwner, the DAO is allowed to set the reinsert pot payout fraction.
     */
    setReinsertPotPayoutFraction(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Called by the engine when producing and closing a block, see https://wiki.parity.io/Block-Reward-Contract.html. This function performs all of the automatic operations needed for accumulating block producing statistics, starting a new staking epoch, snapshotting staking amounts for the upcoming staking epoch, and rewards distributing at the end of a staking epoch.
     * @param _isEpochEndBlock Indicates if this is the last block of the current epoch i.e. just before the pending validators are fiinalized.
     */
    reward(_isEpochEndBlock: boolean): NonPayableTransactionObject<string>;

    /**
     * Returns an array of epoch numbers for which the specified pool (mining address) got a non-zero reward.
     */
    epochsPoolGotRewardFor(
      _miningAddress: string
    ): NonPayableTransactionObject<string[]>;

    /**
     * Returns a boolean flag indicating if the `initialize` function has been called.
     */
    isInitialized(): NonPayableTransactionObject<boolean>;

    /**
     * Returns an array of epoch numbers for which the specified staker can claim a reward from the specified pool by the `StakingHbbft.claimReward` function.
     * @param _poolStakingAddress The pool staking address.
     * @param _staker The staker's address (delegator or candidate/validator).
     */
    epochsToClaimRewardFrom(
      _poolStakingAddress: string,
      _staker: string
    ): NonPayableTransactionObject<string[]>;

    /**
     * Returns the reward coefficient for the specified validator. The given value should be divided by 10000 to get the value of the reward percent (since EVM doesn't support floating values). If the specified staking address is an address of a candidate that is not about to be a validator in the upcoming staking epoch the potentially possible reward coefficient is returned.
     * @param _stakingAddress The staking address of the validator/candidate pool for which the getter must return the coefficient.
     */
    validatorRewardPercent(
      _stakingAddress: string
    ): NonPayableTransactionObject<string>;

    /**
     * Calculates delegator's share for the given pool reward amount and the specified staking epoch. Used by the `StakingHbbft.claimReward` function.
     * @param _delegatorStaked The amount staked by a delegator.
     * @param _poolReward The value of pool reward.
     * @param _stakingEpoch The number of staking epoch.
     * @param _totalStaked The total amount staked by a validator and their delegators.
     * @param _validatorStaked The amount staked by a validator.
     */
    delegatorShare(
      _stakingEpoch: number | string | BN,
      _delegatorStaked: number | string | BN,
      _validatorStaked: number | string | BN,
      _totalStaked: number | string | BN,
      _poolReward: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Calculates validator's share for the given pool reward amount and the specified staking epoch. Used by the `validatorRewardPercent` and `StakingHbbft.claimReward` functions.
     * @param _poolReward The value of pool reward.
     * @param _stakingEpoch The number of staking epoch.
     * @param _totalStaked The total amount staked by a validator and their delegators.
     * @param _validatorStaked The amount staked by a validator.
     */
    validatorShare(
      _stakingEpoch: number | string | BN,
      _validatorStaked: number | string | BN,
      _totalStaked: number | string | BN,
      _poolReward: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    CoinsRewarded(cb?: Callback<CoinsRewarded>): EventEmitter;
    CoinsRewarded(
      options?: EventOptions,
      cb?: Callback<CoinsRewarded>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CoinsRewarded", cb: Callback<CoinsRewarded>): void;
  once(
    event: "CoinsRewarded",
    options: EventOptions,
    cb: Callback<CoinsRewarded>
  ): void;
}
