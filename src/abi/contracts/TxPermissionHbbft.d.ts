/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface TxPermissionHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TxPermissionHbbft;
  clone(): TxPermissionHbbft;
  methods: {
    ANNOUNCE_AVAILABILITY_SIGNATURE(): NonPayableTransactionObject<string>;

    REPORT_MALICIOUS_SIGNATURE(): NonPayableTransactionObject<string>;

    WRITE_ACKS_SIGNATURE(): NonPayableTransactionObject<string>;

    WRITE_PART_SIGNATURE(): NonPayableTransactionObject<string>;

    blockGasLimit(): NonPayableTransactionObject<string>;

    certifierContract(): NonPayableTransactionObject<string>;

    isSenderAllowed(arg0: string): NonPayableTransactionObject<boolean>;

    keyGenHistoryContract(): NonPayableTransactionObject<string>;

    minimumGasPrice(): NonPayableTransactionObject<string>;

    validatorSetContract(): NonPayableTransactionObject<string>;

    /**
     * Initializes the contract at network startup. Can only be called by the constructor of the `Initializer` contract or owner.
     * @param _allowed The addresses for which transactions of any type must be allowed. See the `allowedTxTypes` getter.
     * @param _certifier The address of the `Certifier` contract. It is used by `allowedTxTypes` function to know whether some address is explicitly allowed to use zero gas price.
     * @param _validatorSet The address of the `ValidatorSetHbbft` contract.
     */
    initialize(
      _allowed: string[],
      _certifier: string,
      _validatorSet: string,
      _keyGenHistoryContract: string
    ): NonPayableTransactionObject<void>;

    /**
     * Adds the address for which transactions of any type must be allowed. Can only be called by the `owner`. See also the `allowedTxTypes` getter.
     * @param _sender The address for which transactions of any type must be allowed.
     */
    addAllowedSender(_sender: string): NonPayableTransactionObject<void>;

    /**
     * Removes the specified address from the array of addresses allowed to initiate transactions of any type. Can only be called by the `owner`. See also the `addAllowedSender` function and `allowedSenders` getter.
     * @param _sender The removed address.
     */
    removeAllowedSender(_sender: string): NonPayableTransactionObject<void>;

    /**
     * set's the minimum gas price that is allowed by non-service transactions. IN HBBFT, there must be consens about the validator nodes about wich transaction is legal,  and wich is not. therefore the contract (could be the DAO) has to check the minimum gas price. HBBFT Node implementations can also check if a transaction surpases the minimumGasPrice, before submitting it as contribution. The limit can be changed by the owner (typical the DAO)
     * @param _value The new minimum gas price.
     */
    setMinimumGasPrice(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * set's the block gas limit. IN HBBFT, there must be consens about the block gas limit.
     */
    setBlockGasLimit(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Returns the contract's name recognizable by node's engine.
     */
    contractName(): NonPayableTransactionObject<string>;

    /**
     * Returns the contract name hash needed for node's engine.
     */
    contractNameHash(): NonPayableTransactionObject<string>;

    /**
     * Returns the contract's version number needed for node's engine.
     */
    contractVersion(): NonPayableTransactionObject<string>;

    /**
     * Returns the list of addresses allowed to initiate transactions of any type. For these addresses the `allowedTxTypes` getter always returns the `ALL` bit mask (see https://wiki.parity.io/Permissioning.html#how-it-works-1).
     */
    allowedSenders(): NonPayableTransactionObject<string[]>;

    /**
     * Defines the allowed transaction types which may be initiated by the specified sender with the specified gas price and data. Used by node's engine each time a transaction is about to be included into a block. See https://wiki.parity.io/Permissioning.html#how-it-works-1
     * @param _data Transaction data.
     * @param _gasPrice Gas price in wei for the transaction.
     * @param _sender Transaction sender address.
     * @param _to Transaction recipient address. If creating a contract, the `_to` address is zero.
     * @returns `uint32 typesMask` - Set of allowed transactions for `_sender` depending on tx `_to` address, `_gasPrice`, and `_data`. The result is represented as a set of flags: 0x01 - basic transaction (e.g. ether transferring to user wallet); 0x02 - contract call; 0x04 - contract creation; 0x08 - private transaction. `bool cache` - If `true` is returned, the same permissions will be applied from the same `_sender` without calling this contract again.
     */
    allowedTxTypes(
      _sender: string,
      _to: string,
      arg2: number | string | BN,
      _gasPrice: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<{
      typesMask: string;
      cache: boolean;
      0: string;
      1: boolean;
    }>;

    /**
     * Returns a boolean flag indicating if the `initialize` function has been called.
     */
    isInitialized(): NonPayableTransactionObject<boolean>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
